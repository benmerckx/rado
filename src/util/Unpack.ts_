const {entries, keys} = Object

type Constructible<T> = new (...args: any[]) => T
type Unpacker = any

function fromEnum(keys: Array<any>) {
  return function (input: any) {
    if (!keys.includes(input))
      throw new TypeError(`Expected one of ${keys.join(', ')}`)
    return input
  }
}

function fromData(constuctors: Record<string, {unpack: Function}>) {
  return function (input: any) {
    if (!input || typeof input !== 'object')
      throw new TypeError(`Expected object`)
    const type = input.type
    const unpacker = constuctors[type].unpack
    if (!unpacker)
      throw new TypeError(`Expected one of ${keys(constuctors).join(', ')}`)
    return unpacker(input)
  }
}

export function unpack<T extends {type: string}>(
  proto: Constructible<T>,
  description: {
    [K in keyof T as 'type' extends K ? never : K]: Unpacker
  }
): (input: any) => T {
  const types = entries(description).map(([key, type]) => {
    if (Array.isArray(type)) return [key, fromEnum(type)]
    if (typeof type === 'function' && type.prototype.unpack)
      return [key, type.prototype.unpack]
    if (typeof type === 'object') return [key, fromData(type as any)]
    return [key, type]
  })
  return function (input: any) {
    return new proto(
      ...types.map(([key, type]) => {
        return type(input[key])
      })
    )
  }
}

export namespace unpack {
  export function array<T>(type: Unpacker) {
    return function (input: any) {
      if (!Array.isArray(input)) throw new TypeError(`Expected array`)
      return input.map(type)
    }
  }

  export function object<T>(type: Unpacker) {
    return function (input: any) {
      if (!input || typeof input !== 'object')
        throw new TypeError(`Expected object`)
      return Object.fromEntries(
        entries(input).map(([key, value]) => [key, type(value)])
      )
    }
  }

  export function optional(type: Unpacker) {
    return function (input: any) {
      if (input === undefined) return undefined
      return type(input)
    }
  }

  export function any(input: any) {
    return input
  }
}
